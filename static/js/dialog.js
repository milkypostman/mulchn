// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'lodash', 'backbone', 'bootstrap'], function($, _, Backbone) {
    var Dialog;
    return Dialog = (function(_super) {

      __extends(Dialog, _super);

      function Dialog() {
        this.render = __bind(this.render, this);

        this.remove = __bind(this.remove, this);

        this.initialize = __bind(this.initialize, this);

        this.okWrap = __bind(this.okWrap, this);

        this.ok = __bind(this.ok, this);
        return Dialog.__super__.constructor.apply(this, arguments);
      }

      Dialog.prototype.elTemplate = '<div class="modal fade hide" id="<%= prefix %>Dialog" role="dialog" aria-labelledby="<%= prefix %>Label" aria-hidden="true">\
      <div class="modal-header">\
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>\
        <h3 id="<%= prefix %>Label"><%= title %></h3>\
      </div>\
      <div class="modal-body">\
        <%= content %>\
      </div>\
      <div class="modal-footer">\
        <button class="btn btn-close" data-dismiss="modal" aria-hidden="true"><%= closeButtonText %></button>\
          <% if (primaryButtonText) { %>\
          <button class="btn btn-primary"><%= primaryButtonText %></button>\
          <% } %>\
      </div>\
    </div>';

      Dialog.prototype.ok = function() {};

      Dialog.prototype.okWrap = function() {
        return this.ok(this.$el);
      };

      Dialog.prototype.title = "Title";

      Dialog.prototype.content = "Content";

      Dialog.prototype.closeButtonText = "Close";

      Dialog.prototype.primaryButtonText = void 0;

      Dialog.prototype.prefix = "";

      Dialog.prototype.initialize = function(options) {
        if (!options) {
          options = {};
        }
        if (options.ok) {
          this.ok = options.ok;
        }
        if (options.title) {
          this.title = options.title;
        }
        if (options.content) {
          this.content = options.content;
        }
        if (options.closeButtonText) {
          this.closeButtonText = options.closeButtonText;
        }
        if (options.primaryButtonText) {
          this.primaryButtonText = options.primaryButtonText;
        }
        if (options.prefix) {
          this.prefix = options.prefix;
        }
        this.setElement(_.template(this.elTemplate, {
          prefix: this.prefix,
          title: this.title,
          content: this.content,
          closeButtonText: this.closeButtonText,
          primaryButtonText: this.primaryButtonText
        }));
        this.$el.find(".btn-primary").click(this.okWrap);
        this.$el.on("hidden", this.remove);
        if (options.highlightPrimary | this.highlightPrimary) {
          return this.$el.on("shown", function() {
            return $($(".modal-footer .btn-primary").first()).focus();
          });
        } else {
          return this.$el.on("shown", function() {
            return $($(".modal-footer .btn-close").first()).focus();
          });
        }
      };

      Dialog.prototype.remove = function() {
        return this.$el.remove();
      };

      Dialog.prototype.render = function() {
        $("#content").append(this.el);
        return this.$el.modal('show');
      };

      return Dialog;

    })(Backbone.View);
  });

}).call(this);
