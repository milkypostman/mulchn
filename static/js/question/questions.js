// Generated by CoffeeScript 1.3.3
(function() {
  var answerTmpl, answerVotes, geoPosition, loginDialog, questionHtml, questionTmpl, questions, questionsHtml, questionsUl, selQuestion, toggleQuestion, updateQuestion, vote, votes;

  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g,
    evaluate: /\{\%(.+?)\%\}/g
  };

  answerVotes = function(answer) {
    if (answer.votes) {
      return answer.votes.length;
    } else {
      return 0;
    }
  };

  questionTmpl = _.template('\
<li class="question" id="{{ question._id }}">\
  <div class="question-header">\
    <span class="question-text">{{ question.question }}</span>\
      <div class="vote-info pull-right">no choice selected</div>\
      <div class="vote-count pull-right"></div>\
      <div class="vote-count-prefix pull-right">results:</div>\
  </div>\
</div>\
  <ul class="answers slicklist">\
    {{ answers }}\
  </ul>\
</li>');

  answerTmpl = _.template('\
\
<li class="answer" id="{{ answer._id }}">\
  <i class="icon-ok"></i> {{ answer.answer }}\
  <div class="vote-count pull-right"></div>\
  <div class="vote-count-prefix pull-right">.</div>\
  <div class="vote-percent pull-right"></div>\
</li>');

  questionHtml = function(question) {
    var ans;
    return questionTmpl({
      question: question,
      answers: ((function() {
        var _i, _len, _ref, _results;
        _ref = question.answers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ans = _ref[_i];
          _results.push(answerTmpl({
            answer: ans
          }));
        }
        return _results;
      })()).join('')
    });
  };

  questionsHtml = function(questions) {
    var q;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = questions.length; _i < _len; _i++) {
        q = questions[_i];
        _results.push(questionHtml(q));
      }
      return _results;
    })()).join('');
  };

  questionsUl = '\
  <ul id="questions" class="questions slicklist">\
  </ul>';

  geoPosition = void 0;

  loginDialog = '<div class="modal" id="loginDialog" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">\
  <div class="modal-header">\
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>\
    <h3 id="loginDialogHeader">Login Required</h3>\
  </div>\
  <div class="modal-body">\
    <p id="loginDialogBody">Voting requires a valid login.</p>\
  </div>\
  <div class="modal-footer">\
    <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>\
    <button class="btn btn-primary">Login</button>\
  </div>\
</div>';

  vote = function(evt) {
    var answer, data, question, target;
    target = evt.currentTarget;
    answer = $(target);
    answer.addClass("working");
    question = answer.closest(".question");
    data = {
      question: question.attr("id"),
      answer: answer.attr("id")
    };
    if (geoPosition) {
      data.latitude = geoPosition.coords.latitude;
      data.longitude = geoPosition.coords.longitude;
      data.accuracy = geoPosition.coords.accuracy;
      data.speed = geoPosition.coords.speed;
      data.geotimestamp = geoPosition.timestamp;
    }
    $.ajax({
      url: "/v1/question/vote/",
      type: "POST",
      data: data,
      dataType: 'json',
      context: question,
      success: function(data) {
        return updateQuestion(data.question, data.vote);
      },
      error: function(error) {
        data = $.parseJSON(error.responseText);
        if (error.status === 401) {
          $('#loginDialog').modal('show');
        }
        return answer.removeClass('working');
      }
    });
    return false;
  };

  updateQuestion = function(question, vote) {
    var ans, av, totalVotes, _i, _len, _ref;
    if (vote) {
      totalVotes = _.reduce(question.answers, function(t, a) {
        return t + answerVotes(a);
      }, 0);
      _ref = question.answers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ans = _ref[_i];
        av = answerVotes(ans);
        $("#" + ans._id + " .vote-percent").html("" + (Math.round(av / totalVotes * 100)) + "%");
        $("#" + ans._id + " .vote-count").html("" + av);
      }
      $("#" + question._id + " .vote-count").first().html("" + totalVotes);
      $("#" + question._id + " .answer").removeClass("vote");
      $("#" + question._id + " .answer").removeClass("working");
      $("#" + question._id).addClass("voted");
      return $("#" + vote).addClass("vote");
    }
  };

  selQuestion = void 0;

  toggleQuestion = function(evt) {
    var jselQuestion, jtarget, target;
    target = evt.currentTarget;
    jtarget = $(target);
    if (selQuestion === target) {
      jtarget.children(".answers").slideUp();
      jtarget.removeClass("active");
      selQuestion = void 0;
    } else {
      if (selQuestion) {
        jselQuestion = $(selQuestion);
        jselQuestion.children(".answers").slideUp();
        jselQuestion.removeClass("active");
      }
      jtarget.children(".answers").slideDown();
      jtarget.addClass("active");
      selQuestion = target;
    }
    return false;
  };

  questionsUl = '\
  <ul id="questions" class="questions slicklist">\
  </ul>';

  questions = [];

  votes = {};

  $(window).load(function() {
    $('#content').append(questionsUl);
    $.ajax({
      url: '/v1/questions/',
      success: function(data) {
        var q, _i, _len;
        questions = data.questions;
        votes = data.votes;
        $('#questions').html(questionsHtml(questions));
        for (_i = 0, _len = questions.length; _i < _len; _i++) {
          q = questions[_i];
          updateQuestion(q, votes[q._id]);
        }
        $('.question').click(toggleQuestion);
        return $('.answer').click(vote);
      },
      error: function() {
        return $('#questions').html("<p>An error has occurred.</p>");
      }
    });
    $('#content').append(loginDialog);
    $('#loginDialog .btn-primary').click(function() {
      return window.location.href = "/login/";
    });
    if (navigator.geolocation) {
      return navigator.geolocation.getCurrentPosition(function(position) {
        return geoPosition = position;
      });
    }
  });

}).call(this);
